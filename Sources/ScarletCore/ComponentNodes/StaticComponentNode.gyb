%{
    IDX = int(IDX)

    E_TYPES = ", ".join([f"E{i}" for i in range(0, IDX)])
    E_CONSTRAINTS = ", ".join([f"E{i}: ComponentModel" for i in range(0, IDX)])
}%
/*
   Copyright 2022 natinusala

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Generated by `codegen.py` from `StaticComponentNode.gyb`

public struct StaticComponentInput${IDX}<Model>: ComponentInput where Model: ComponentModel {

}

public struct StaticComponentOutput${IDX}<Model, ${E_TYPES}>: ComponentOutput where Model: ComponentModel, ${E_CONSTRAINTS} {
% for i in range(0, IDX):
    var e${i}: E${i}
% end
}

/// A component with static edges, aka. always the same amount of edges with the same type.
/// Performs no equality check on the component so its edges will always be updated ("passthrough" component).
public class StaticComponentNode${IDX}<Model, ${E_TYPES}>: ComponentNode where Model: ComponentModel, ${E_CONSTRAINTS}, Model.Input == StaticComponentInput${IDX}<Model>, Model.Output == StaticComponentOutput${IDX}<Model, ${E_TYPES}> {
    typealias Input = StaticComponentInput${IDX}<Model>
    typealias Output = StaticComponentOutput${IDX}<Model, ${E_TYPES}>

    public weak var parent: (any ComponentNode)?
    public var target: Model.Target?
    public var targetCount = 0
    public var attributes = AttributesStash()

% for i in range(0, IDX):
    var e${i}: E${i}.Node?
% end

    init(making component: Model, in parent: (any ComponentNode)?, targetPosition: Int, using context: Context) {
        self.parent = parent

        // Create the target node
        self.target = Model.makeTarget(of: component)

        // Start a first update without comparing (since we update the model with itself)
        let result = self.update(with: component, targetPosition: targetPosition, using: context, initial: true)

        // Attach the target once everything is ready
        self.insertTargetInParent(position: result.targetPosition)
    }

    public func updateEdges(from output: Model.Output?, at targetPosition: Int, using context: Context) -> UpdateResult {
        // Create edges if updating for the first time
        // Otherwise update them

        var totalTargetCount = 0

% for i in range(0, IDX):
        // Edge ${i}
        let e${i}TargetPosition = targetPosition + totalTargetCount
        let e${i}TargetCount: Int
        if let e${i} = self.e${i} {
            e${i}TargetCount = e${i}.compareAndUpdate(
                with: output?.e${i},
                targetPosition: e${i}TargetPosition,
                using: context
            ).targetCount
        } else if let output {
            let edge = E${i}.makeNode(of: output.e${i}, in: self, targetPosition: e${i}TargetPosition, using: context)
            self.e${i} = edge
            e${i}TargetCount = edge.targetCount
        } else {
            nilOutputFatalError(for: E${i}.self)
        }
        totalTargetCount += e${i}TargetCount

        targetLogger.trace("\(E${i}.self) returned target count \(e${i}TargetCount) - Total: \(totalTargetCount)")
% end

        return UpdateResult(
            targetPosition: targetPosition,
            targetCount: totalTargetCount
        )
    }

    public func make(component: Model) -> Model.Output {
        let input = Input()
        return Model.make(component, input: input)
    }

    public var allEdges: [(any ComponentNode)?] {
        return [
% for i in range(0, IDX):
            self.e${i},
% end
        ]
    }
}
