%{
    IDX = int(IDX)

    E_TYPES = ", ".join([f"E{i}" for i in range(0, IDX)])
    E_CONSTRAINTS = ", ".join([f"E{i}: Element" for i in range(0, IDX)])
}%
/*
   Copyright 2022 natinusala

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Generated by `codegen.py` from `StaticElementNode.gyb`

public struct StaticMakeInput${IDX}<Value>: MakeInput where Value: Element {

}

public struct StaticMakeOutput${IDX}<Value, ${E_TYPES}>: MakeOutput where Value: Element, ${E_CONSTRAINTS} {
% for i in range(0, IDX):
    var e${i}: E${i}
% end
}

/// An element with static edges, aka. always the same amount of edges
/// with the same type.
public class StaticElementNode${IDX}<Value, ${E_TYPES}>: ElementNode where Value: Element, ${E_CONSTRAINTS}, Value.Input == StaticMakeInput${IDX}<Value>, Value.Output == StaticMakeOutput${IDX}<Value, ${E_TYPES}> {
    typealias Input = StaticMakeInput${IDX}<Value>
    typealias Output = StaticMakeOutput${IDX}<Value, ${E_TYPES}>

    public var value: Value
    public var parent: (any ElementNode)?
    public var implementation: Value.Implementation?
    public var cachedImplementationPosition = 0
    public var cachedImplementationCount = 0

% for i in range(0, IDX):
    var e${i}: E${i}.Node?
% end

    init(making element: Value, in parent: (any ElementNode)?, implementationPosition: Int) {
        self.value = element

        // Start a first update without comparing (since we update the value with itself)
        self.update(with: element, compare: false, implementationPosition: implementationPosition)

        // Create the implementation node
        self.implementation = Value.makeImplementation(of: element)

        // Attach the implementation once our cached values are set
        self.attachImplementationToParent()
    }

    public func updateEdges(from output: Value.Output, at implementationPosition: Int) {
        // Create edges if updating for the first time
        // Otherwise update them

        var totalImplementationCount = 0

% for i in range(0, IDX):
        // Edge ${i}
        let e${i}ImplementationPosition = implementationPosition + totalImplementationCount
        let e${i}ImplementationCount: Int
        if let e${i} = self.e${i} {
            e${i}ImplementationCount = e${i}.update(with: output.e${i}, compare: true, implementationPosition: e${i}ImplementationPosition)
        } else {
            let edge = E${i}.makeNode(of: output.e${i}, in: self, implementationPosition: e${i}ImplementationPosition)
            self.e${i} = edge
            e${i}ImplementationCount = edge.cachedImplementationCount
        }
        totalImplementationCount += e${i}ImplementationCount

% end

        // Update cached values
        self.cachedImplementationPosition = implementationPosition
        self.cachedImplementationCount = totalImplementationCount
    }

    public func make(element: Value) -> Value.Output {
        let input = Input()
        return Value.make(element, input: input)
    }
}
