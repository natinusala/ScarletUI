
/*
   Copyright 2022 natinusala

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Generated by codegen.py from StaticElementNode.gyb

public struct StaticMakeInput3<Value>: MakeInput where Value: Element {

}

public struct StaticMakeOutput3<Value, E0, E1, E2>: MakeOutput where Value: Element, E0: Element, E1: Element, E2: Element {
    var e0: E0
    var e1: E1
    var e2: E2
}

/// An element with static edges, aka. always the same amount of edges
/// with the same type.
public class StaticElementNode3<Value, E0, E1, E2>: ElementNode where Value: Element, E0: Element, E1: Element, E2: Element, Value.Input == StaticMakeInput3<Value>, Value.Output == StaticMakeOutput3<Value, E0, E1, E2> {
    typealias Input = StaticMakeInput3<Value>
    typealias Output = StaticMakeOutput3<Value, E0, E1, E2>

    /// Value of the node.
    var value: Value

    // Last known implementation position.
    var cachedImplementationPosition = 0

    // Last known implementation count.
    var cachedImplementationCount = 0

    var e0: E0.Node?
    var e1: E1.Node?
    var e2: E2.Node?

    init(making element: Value) {
        self.value = element

        // Start a first update without comparing (since we update the value with itself)
        self.update(with: element, compare: false)

        // Attach the implementation once our cached values are setup
        self.attachImplementationToParent()
    }

    public func update(with element: Value, compare: Bool, implementationPosition: ImplementationPosition) -> Int {
        // Compare the element to see if it changed
        // If it didn't, don't do anything
        guard !compare || !Value.equals(lhs: element, rhs: self.value) else {
            return
        }

        let input = Input()
        let output = Value.make(element, input: input)

        // Override implementation position if the element is substantial since our edges
        // must start at 0 (the parent being ourself)

        self.update(element, with: output, implementationPosition: self.substantial ? 0 : implementationPosition)

        // Override implementation count if the element is substantial since it has one implementation: itself
        if self.substantial {
            self.cachedImplementationCount = 1
        }

        return self.cachedImplementationCount
    }

    func update(_ element: Value, with output: Output) {
        // Update value
        self.value = element

        // Create edges if updating for the first time
        // Otherwise update them
        if self.e0 == nil {
            self.e0 = E0.makeNode(for: output.e0)
        } else {
            self.e0?.update(with: output.e0, compare: true)
        }
    }
}
