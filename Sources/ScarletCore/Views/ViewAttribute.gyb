%{
    IDX = int(IDX)

    A_TYPES = ", ".join([f"A{i}: AttributeSetter" for i in range(0, IDX)])
    A_PARAMS = ", ".join([f"_ a{i}: A{i}" for i in range(0, IDX)])
    A_VALUES = ", ".join([f"a{i}: a{i}" for i in range(0, IDX)])
    A_NAMES = ", ".join([f"A{i}" for i in range(0, IDX)])
}%
/*
   Copyright 2022 natinusala

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// Generated by `codegen.py` from `ViewAttribute.gyb`

/// A view that applies ${IDX} attributes to its content in an efficient way.
/// Behaves similarly to a view modifier by wrapping its content.
/// Use with ``View.attributed(_:)`` like you would use ``View.modified(by:)`` for view modifiers.
public struct ViewAttribute${IDX}<Content: View, ${A_TYPES}>: View {
    public typealias Input = StaticMakeInput1<Self>
    public typealias Output = StaticMakeOutput1<Self, Content>
    public typealias Implementation = Never

    let content: Content

% for i in range(0, IDX):
    let a${i}: A${i}
% end

    public var body: Never {
        fatalError()
    }

    public static func collectAttributes(of element: Self, source: AnyHashable) -> AttributesStash {
        return AttributesStash(
            from: [
% for i in range(0, IDX):
                element.a${i}.target: element.a${i},
% end
            ],
            source: source
        )
    }

    public static func makeNode(
        of element: Self,
        in parent: (any ElementNode)?,
        implementationPosition: Int,
        using context: Context
    ) -> StaticElementNode1<Self, Content> where Input == StaticMakeInput1<Self> {
        return .init(making: element, in: parent, implementationPosition: implementationPosition, using: context)
    }

    public static func make(
        _ element: Self,
        input: StaticMakeInput1<Self>
    ) -> StaticMakeOutput1<Self, Content> {
        return .init(
            e0: element.content
        )
    }
}

public extension View {
    func attributed<${A_TYPES}>(${A_PARAMS}) -> ViewAttribute${IDX}<Self, ${A_NAMES}> {
        return ViewAttribute${IDX}<Self, ${A_NAMES}>(content: self, ${A_VALUES})
    }
}
