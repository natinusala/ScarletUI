/*
   Copyright 2022 natinusala

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

import Foundation
import Stencil

func render(rules: [Rule], in output: URL, using context: [String: Any], for toolName: String, from bundle: Bundle) throws {
    // Open output file
    trace("Creating \(output.path)")
    FileManager.default.createFile(atPath: output.path, contents: nil)

    let handle: FileHandle 
    do {
        handle = try FileHandle(forUpdating: output)
    } catch {
        trace("Error while opening file: \(error)")
        throw ArchtypeError.cannotOpenOutputFile
    }

    try handle.seek(toOffset: 0)

    // Write header
    try handle.writeLine(makeHeader(for: toolName))

    // Run each rule's stencil
    let context = Context(dictionary: context, environment: nil)
    for rule in rules {
        try renderRule(rule, to: handle, using: context, from: bundle)
    }
    
    // Close handle
    try handle.close()
}

/// Returns the output file header.
private func makeHeader(for tool: String) -> String {
    return "// Generated by \(tool)"
}

/// Renders a rule in the given file handle.
private func renderRule(_ rule: Rule, to handle: FileHandle, using context: Context, from bundle: Bundle) throws {
    let templateString = try getTemplate(named: rule.template, from: bundle)

    let template = Template(templateString: templateString)
    let render = try template.render(context)

    try handle.writeLine("// MARK: \(rule.template)")
    try handle.write(render)
}

/// Reads the template file from the bundle and returns it as string.
private func getTemplate(named name: String, from bundle: Bundle) throws -> String {
    let components = name.components(separatedBy: ".")

    if components.count != 2 {
        throw ArchtypeError.wrongTemplateFileName
    }

    guard let url = bundle.url(forResource: components[0], withExtension: components[1]) else {
        trace("Template not found with resource '\(components[0])' and extension '\(components[1])' inside bundle \(bundle)")
        throw ArchtypeError.templateNotFound
    }

    trace("Reading template '\(url.path)'")

    return try String(contentsOf: url)
}

private extension FileHandle {
    /// Convenience method to write a string to a file.
    func write(_ string: String) throws {
        guard let data = string.data(using: .utf8) else {
            throw ArchtypeError.outputEncodingError
        }

        return self.write(data)
    }

    /// Convenience method to write a line to a file.
    func writeLine(_ string: String) throws {
        guard let data = "\(string)\n".data(using: .utf8) else {
            throw ArchtypeError.outputEncodingError
        }

        return self.write(data)
    }
}
