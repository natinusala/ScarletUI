{
    "tests": [
        {
            "name": "debug.xctest",
            "tests": [
                {
                    "tests": [
                        {
                            "name": "`tryEquatable`, comparing nonconforming structs, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming structs, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming structs, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing strings, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing strings, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing integers, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing integers, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing floats, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing floats, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing nonconforming classes, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming classes, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming classes, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming tuples, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming tuples, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing nonconforming tuples, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming enums, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming enums, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing nonconforming enums, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing nonconforming closures, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming arrays, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming arrays, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing nonconforming arrays, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming dicts, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming dicts, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing nonconforming dicts, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming optionals, when equal, returns true"
                        },
                        {
                            "name": "`tryEquatable`, comparing conforming optionals, when different, returns false"
                        },
                        {
                            "name": "`tryEquatable`, comparing nonconforming optionals, when nonconforming, returns nil"
                        },
                        {
                            "name": "`tryEquatable`, comparing nil optionals, when equal, returns true"
                        }
                    ],
                    "name": "Quick.QuickSpec"
                },
                {
                    "tests": [
                        {
                            "name": "`anyEquals`, comparing different equatable types, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing different nonequatable types, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable strings, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable strings, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable integers, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable integers, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable floats, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable floats, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable structs, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable structs, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable enums, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable enums, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable same enums, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable same enums, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable different enums, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing unbalanced enums, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable dicts, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing equatable dicts, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable tuples, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable tuples, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing different nonequatable objects with same value, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing different nonequatable objects with different values, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing same nonequatable objects, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing different equatable objects with same value, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing different equatable objects with different values, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing same equatable objects, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable structs, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable structs with stored property wrappers, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable structs with computed property wrappers, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable structs with class property wrappers, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable structs with class property wrappers, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable arrays, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable arrays, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable dicts, when equal, returns true"
                        },
                        {
                            "name": "`anyEquals`, comparing nonequatable dicts, when different, returns false"
                        },
                        {
                            "name": "`anyEquals`, comparing closures, when different, returns false"
                        }
                    ],
                    "name": "Quick.QuickSpec"
                },
                {
                    "name": "Quick.QuickSpec",
                    "tests": [
                        {
                            "name": "a view with input, when the view is created, then implementation is created"
                        },
                        {
                            "name": "a view with input, when the view input does not change, then body is not called"
                        },
                        {
                            "name": "a view with input, when the view input does not change, then nested body is not called"
                        },
                        {
                            "name": "a view with input, when the view input does not change, then implementation is untouched"
                        },
                        {
                            "name": "a view with input, when the view input changes, then body is called"
                        },
                        {
                            "name": "a view with input, when the view input changes, then nested body is called"
                        },
                        {
                            "name": "a view with input, when the view input changes, then implementation is updated"
                        }
                    ]
                },
                {
                    "tests": [
                        {
                            "name": "an empty view, when the view is created, then implementation is created"
                        },
                        {
                            "name": "an empty view, when the view is updated, then body is not called"
                        },
                        {
                            "name": "an empty view, when the view is updated, then implementation is untouched"
                        }
                    ],
                    "name": "Quick.QuickSpec"
                },
                {
                    "tests": [
                        {
                            "name": "a view with multiple children, when the view is created, then implementation is created"
                        }
                    ],
                    "name": "Quick.QuickSpec"
                },
                {
                    "tests": [
                        {
                            "name": "a view with balanced conditionals, when the view is created, then implementation is created"
                        },
                        {
                            "name": "a view with balanced conditionals, when switching from first to second, then implementation is updated"
                        }
                    ],
                    "name": "Quick.QuickSpec"
                },
                {
                    "tests": [
                        {
                            "name": "a view with unbalanced conditionals, when the view is created, then implementation is created"
                        },
                        {
                            "name": "a view with unbalanced conditionals, when switching from first to second, then implementation is updated"
                        }
                    ],
                    "name": "Quick.QuickSpec"
                },
                {
                    "name": "Quick.QuickSpec",
                    "tests": [
                        {
                            "name": "a view with conditionals containing optionals, when the view is created without the optional, then implementation is created"
                        },
                        {
                            "name": "a view with conditionals containing optionals, when the view is created with the optional, then implementation is created"
                        },
                        {
                            "name": "a view with conditionals containing optionals, when switching from first to second without optional, then implementation is updated"
                        },
                        {
                            "name": "a view with conditionals containing optionals, when switching from first to second with optional, then implementation is updated"
                        },
                        {
                            "name": "a view with conditionals containing optionals, when inserting optional, then implementation is updated"
                        },
                        {
                            "name": "a view with conditionals containing optionals, when removing optional, then implementation is updated"
                        }
                    ]
                },
                {
                    "name": "Quick.QuickSpec",
                    "tests": [
                        {
                            "name": "a view with empty conditionals, when creating with empty first, then implementations are created"
                        },
                        {
                            "name": "a view with empty conditionals, when creating with full first, then implementations are created"
                        },
                        {
                            "name": "a view with empty conditionals, when creating with empty second, then implementations are created"
                        },
                        {
                            "name": "a view with empty conditionals, when creating with full second, then implementations are created"
                        },
                        {
                            "name": "a view with empty conditionals, when removing first elements, then implementations are updated"
                        },
                        {
                            "name": "a view with empty conditionals, when adding first elements, then implementations are updated"
                        },
                        {
                            "name": "a view with empty conditionals, when removing second elements, then implementations are updated"
                        },
                        {
                            "name": "a view with empty conditionals, when adding second elements, then implementations are updated"
                        }
                    ]
                },
                {
                    "name": "Quick.QuickSpec",
                    "tests": [
                        {
                            "name": "a view with nested conditionals, when the view is created, then implementation is created"
                        },
                        {
                            "name": "a view with nested conditionals, when the view is updated, then implementation is updated"
                        }
                    ]
                },
                {
                    "tests": [
                        {
                            "name": "a view with top level nested conditionals, when view is created, then implementation is created"
                        },
                        {
                            "name": "a view with top level nested conditionals, when view is updated, then implementation is created"
                        }
                    ],
                    "name": "Quick.QuickSpec"
                },
                {
                    "tests": [
                        {
                            "name": "a view with two consecutive conditionals, when the view is created, then implementation is created"
                        },
                        {
                            "name": "a view with two consecutive conditionals, when the view is updated, then implementation is updated"
                        }
                    ],
                    "name": "Quick.QuickSpec"
                }
            ]
        }
    ],
    "name": "All tests"
}
