///
/// @Generated by Mockolo until I got rid of it
///



import Foundation
import Runtime
@testable import ScarletCore


class BodyAccessorMock: BodyAccessor {
    init() { }

    init(wrapping wrapped: any BodyAccessor) {
        self.makeBodyOfHandler = { (app) in
            return wrapped.makeBody(of: (app as! any App))
        }
        self.makeBodyHandler = { (view) in
            return wrapped.makeBody(of: (view as! any View))
        }
        self.makeBodyOfVMViewModifierHandler = { (modifier) in
            return wrapped.makeBody(of: (modifier as! any ViewModifier))
        }
        self.makeBodyOfSSceneHandler = { (scene) in
            return wrapped.makeBody(of: (scene as! any Scene))
        }
    }

    private(set) var makeBodyCallCount = 0
    var makeBodyArgValues = [Any]()
    var makeBodyHandler: ((Any) -> (Any))?
    func makeBody<V: View>(of view: V) -> V.Body {
        makeBodyCallCount += 1
        makeBodyArgValues.append(view)
        if let makeBodyHandler = makeBodyHandler {
            return makeBodyHandler(view) as! V.Body
        }
        fatalError("makeBodyHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeBodyOfCallCount = 0
    var makeBodyOfArgValues = [Any]()
    var makeBodyOfHandler: ((Any) -> (Any))?
    func makeBody<A: App>(of app: A) -> A.Body {
        makeBodyOfCallCount += 1
        makeBodyOfArgValues.append(app)
        if let makeBodyOfHandler = makeBodyOfHandler {
            return makeBodyOfHandler(app) as! A.Body
        }
        fatalError("makeBodyOfHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeBodyOfSSceneCallCount = 0
    var makeBodyOfSSceneArgValues = [Any]()
    var makeBodyOfSSceneHandler: ((Any) -> (Any))?
    func makeBody<S: Scene>(of scene: S) -> S.Body {
        makeBodyOfSSceneCallCount += 1
        makeBodyOfSSceneArgValues.append(scene)
        if let makeBodyOfSSceneHandler = makeBodyOfSSceneHandler {
            return makeBodyOfSSceneHandler(scene) as! S.Body
        }
        fatalError("makeBodyOfSSceneHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var makeBodyOfVMViewModifierCallCount = 0
    var makeBodyOfVMViewModifierArgValues = [Any]()
    var makeBodyOfVMViewModifierHandler: ((Any) -> (Any))?
    func makeBody<VM: ViewModifier>(of modifier: VM) -> VM.Body {
        makeBodyOfVMViewModifierCallCount += 1
        makeBodyOfVMViewModifierArgValues.append(modifier)
        if let makeBodyOfVMViewModifierHandler = makeBodyOfVMViewModifierHandler {
            return makeBodyOfVMViewModifierHandler(modifier) as! VM.Body
        }
        fatalError("makeBodyOfVMViewModifierHandler returns can't have a default value thus its handler must be set")
    }
}

