plus besoin de ChangeToken vu qu'on ne compare plus ?

tester plusieurs .environment sur la même vue

jointer avec State un peu dans tous les sens
    vérifier que changer le state d'une vue qui a @Environment les conserve proprement

faire le schéma du tableau et jouer un peu avec tout et assert un maximum de choses, y compris:
    - 10
    - 20 -> 10: le 10 d'en dessous ne doit pas être refait (par contre on réévalue les vues sous le 20)
    - 10

-------------------------------------------------
impl:
    dans le contexte on stocke les valeurs avec un flag qui dit si ça a changé
    lors de l'installation on n'installe que celles qui ont changé
    les valeurs sont discard dans le context à la sauvegarde
    à l'intérieur de EnvironmentElementNode on stocke la dernière valeur, on fait la comparaison là (dans la collecte)

-------------------------------------------------

- state change dans un modifier qui réordonne content dans son body (un conditional avec if content, else if content, else rien du tout)
- state change dans un modifier qui ajoute et retire un content dans son body (il y en a 2, un qui reste et un qui est toggle) - vérifier que le state est bien différent et conservé
- state change dans la vue modifiée

- plusieurs VMC (modifier avec plusieurs fois content dedans) (vérifier que le state est bien différent = différente identité)
- modifier appliqué sur plusieurs vues avec Group (dans GroupSpec)

- un modifier avec un body avec des ifs pour voir que le contenu change / le content est déplacé par exemple

- un modifier dans le body d'un modifier (on modifie content)

- pour foreach:
    - un foreach modifié
    - des state dans les vues générées par le foreach
    - les vues générées par le foreach modifiées

- state change avec une valeur qui ne change pas (body ne doit pas être appelé)
- un state change dans une vue fille qui insère (et retire) des vues au milieu de la vue parent

tests sur les attributs:
    tester AttributeView
    tester les property wrapper
    tester la propagation
    tester le type d'implémentation (mettre un attribut sur une view parent doit le propager au bon enfants)
    vérifier la priorité des attributs (appliquer le même attribut N+2 sur la vue N et N+1 (doit se propager et prendre la bonne valeur))
    tester les append: avoir plusieurs onTestSignal mais sur des signaux différents

tests sur le retain des elementnode et implementationnode
    vérifier que la copie de state met bien à jour le retain count sur la location
    vérifier que retirer un noeud deinit bien le node + l'implementation (stateful et stateless)
    vérifier que le weak sur statelocation fonctionne
